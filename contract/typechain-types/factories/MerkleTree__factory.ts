/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MerkleTree, MerkleTreeInterface } from "../MerkleTree";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_groupName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "addNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "groupName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchAddNode[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchAddNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchUpdateNode[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchUpdateNode",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchUpdateNodePro[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchUpdateNodePro",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
    ],
    name: "getAllNodes",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "groupName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "groupId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "level",
                type: "uint256",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode[]",
        name: "allNodes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "groupName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "groupId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "level",
                type: "uint256",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
    ],
    name: "getNodeByHash",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "data",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "groupName",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "level",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "groupId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "index",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "level",
                type: "uint256",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
    ],
    name: "getNodeCounts",
    outputs: [
      {
        internalType: "uint256",
        name: "nodeCounts",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
    ],
    name: "getSameLevelNodesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "merkleTrees",
    outputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nums",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "updateNode",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_siblingHash",
        type: "bytes32",
      },
    ],
    name: "updateNodeProperties",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611d79806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638832e4a41161008c578063a7ecfd1e11610066578063a7ecfd1e1461020c578063d442339b1461023c578063d5b132591461026c578063df71c5431461028a576100cf565b80638832e4a4146101a45780639807aad3146101c0578063a68051a9146101dc576100cf565b806319c5a225146100d457806336051243146100f057806348e92a40146101205780635474f7a41461013c5780636a1e8dd11461015857806385d88cb114610174575b600080fd5b6100ee60048036038101906100e991906114b6565b6102ba565b005b61010a60048036038101906101059190611586565b6103f9565b60405161011791906119f1565b60405180910390f35b61013a60048036038101906101359190611475565b610460565b005b61015660048036038101906101519190611676565b61059f565b005b610172600480360381019061016d91906114f7565b6105bf565b005b61018e60048036038101906101899190611586565b6106fd565b60405161019b91906119f1565b60405180910390f35b6101be60048036038101906101b99190611434565b610721565b005b6101da60048036038101906101d59190611676565b6108a5565b005b6101f660048036038101906101f191906115af565b6108ef565b60405161020391906119cf565b60405180910390f35b61022660048036038101906102219190611627565b6109c6565b60405161023391906119cf565b60405180910390f35b610256600480360381019061025191906115eb565b610a03565b60405161026391906119f1565b60405180910390f35b610274610a1b565b60405161028191906119f1565b60405180910390f35b6102a4600480360381019061029f9190611586565b610a20565b6040516102b1919061198d565b60405180910390f35b60005b81518110156103f5576103e2828281518110610302577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151838381518110610347577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516060015184848151811061038c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001518585815181106103d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015161059f565b80806103ed90611c05565b9150506102bd565b5050565b60008161040581610bda565b600061041084610c21565b90506000816031811061044c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600202016001018054905092505050919050565b60005b815181101561059b576105888282815181106104a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518383815181106104ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160600151848481518110610532577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151858581518110610577577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151608001516108a5565b808061059390611c05565b915050610463565b5050565b60006105ac8585856109c6565b9050818160200181815250505050505050565b6105c7610f15565b60006105d286610c21565b9050868260200181815250508582604001818152505084826060018190525082826080018181525050838260a00181815250506000816031811061063f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600202016001018290806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030190805190602001906106aa929190610f66565b506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007016000820151816000015560208201518160010155604082015181600201555050505050505050505050565b6000816031811061070d57600080fd5b600202016000915090508060000154905081565b60005b81518110156108a15761088e828281518110610769577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001518383815181106107ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518484815181106107f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151858581518110610838577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516080015186868151811061087d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151606001516105bf565b808061089990611c05565b915050610724565b5050565b60006108b28585856109c6565b9050818160c0018181525050848160e001516000018181525050838160e001516040018181525050828160e0015160200181815250505050505050565b6108f7610f15565b8261090181610bda565b600061090c85610a20565b905060005b81518110156109bd57818181518110610953577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518514156109aa5781818151811061099f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015193505b80806109b590611c05565b915050610911565b50505092915050565b6109ce610f15565b8383836109da83610bda565b6109e382610c9e565b6109ec81610ce5565b6109f7858888610d2e565b93505050509392505050565b6000610a0f8383610dfd565b90508091505092915050565b603181565b606081610a2c81610bda565b6000610a3784610c21565b905060008160318110610a73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60020201600101805480602002602001604051908101604052809291908181526020016000905b82821015610bcd57838290600052602060002090600a020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382018054610aec90611ba2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1890611ba2565b8015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682015481526020016007820160405180606001604052908160008201548152602001600182015481526020016002820154815250508152505081526020019060010190610a9a565b5050505092505050919050565b6031811115610c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c15906119af565b60405180910390fd5b50565b600080600090505b6031811015610c975760008160318110610c6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002020160000154831415610c845780915050610c99565b8080610c8f90611c05565b915050610c29565b505b919050565b6010811115610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd9906119af565b60405180910390fd5b50565b62010000811115610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906119af565b60405180910390fd5b50565b610d36610f15565b6000610d428484610dfd565b50905060005b8151811015610df457818181518110610d8a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160800151861415610de157818181518110610dd6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505b8080610dec90611c05565b915050610d48565b50509392505050565b6060600080610e0b85610a20565b905060005b8151811015610f0c57818181518110610e52577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160a00151851415610ef957818181518110610e9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848481518110610edf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280610ef590611c05565b9350505b8080610f0490611c05565b915050610e10565b50509250929050565b60405180610100016040528060008152602001600080191681526020016000815260200160608152602001600081526020016000815260200160008019168152602001610f60610fec565b81525090565b828054610f7290611ba2565b90600052602060002090601f016020900481019282610f945760008555610fdb565b82601f10610fad57805160ff1916838001178555610fdb565b82800160010185558215610fdb579182015b82811115610fda578251825591602001919060010190610fbf565b5b509050610fe8919061100d565b5090565b60405180606001604052806000815260200160008152602001600081525090565b5b8082111561102657600081600090555060010161100e565b5090565b600061103d61103884611a31565b611a0c565b9050808382526020820190508285602086028201111561105c57600080fd5b60005b858110156110a657813567ffffffffffffffff81111561107e57600080fd5b80860161108b8982611283565b8552602085019450602084019350505060018101905061105f565b5050509392505050565b60006110c36110be84611a5d565b611a0c565b905080838252602082019050828560a08602820111156110e257600080fd5b60005b8581101561111257816110f88882611323565b845260208401935060a083019250506001810190506110e5565b5050509392505050565b600061112f61112a84611a89565b611a0c565b9050808382526020820190508285608086028201111561114e57600080fd5b60005b8581101561117e578161116488826113ab565b845260208401935060808301925050600181019050611151565b5050509392505050565b600061119b61119684611ab5565b611a0c565b9050828152602081018484840111156111b357600080fd5b6111be848285611b60565b509392505050565b600082601f8301126111d757600080fd5b81356111e784826020860161102a565b91505092915050565b600082601f83011261120157600080fd5b81356112118482602086016110b0565b91505092915050565b600082601f83011261122b57600080fd5b813561123b84826020860161111c565b91505092915050565b60008135905061125381611d15565b92915050565b600082601f83011261126a57600080fd5b813561127a848260208601611188565b91505092915050565b600060a0828403121561129557600080fd5b61129f60a0611a0c565b905060006112af84828501611244565b60008301525060206112c38482850161141f565b602083015250604082013567ffffffffffffffff8111156112e357600080fd5b6112ef84828501611259565b60408301525060606113038482850161141f565b60608301525060806113178482850161141f565b60808301525092915050565b600060a0828403121561133557600080fd5b61133f60a0611a0c565b9050600061134f84828501611244565b60008301525060206113638482850161141f565b60208301525060406113778482850161141f565b604083015250606061138b8482850161141f565b606083015250608061139f84828501611244565b60808301525092915050565b6000608082840312156113bd57600080fd5b6113c76080611a0c565b905060006113d784828501611244565b60008301525060206113eb8482850161141f565b60208301525060406113ff8482850161141f565b60408301525060606114138482850161141f565b60608301525092915050565b60008135905061142e81611d2c565b92915050565b60006020828403121561144657600080fd5b600082013567ffffffffffffffff81111561146057600080fd5b61146c848285016111c6565b91505092915050565b60006020828403121561148757600080fd5b600082013567ffffffffffffffff8111156114a157600080fd5b6114ad848285016111f0565b91505092915050565b6000602082840312156114c857600080fd5b600082013567ffffffffffffffff8111156114e257600080fd5b6114ee8482850161121a565b91505092915050565b600080600080600060a0868803121561150f57600080fd5b600061151d88828901611244565b955050602061152e8882890161141f565b945050604086013567ffffffffffffffff81111561154b57600080fd5b61155788828901611259565b93505060606115688882890161141f565b92505060806115798882890161141f565b9150509295509295909350565b60006020828403121561159857600080fd5b60006115a68482850161141f565b91505092915050565b600080604083850312156115c257600080fd5b60006115d08582860161141f565b92505060206115e185828601611244565b9150509250929050565b600080604083850312156115fe57600080fd5b600061160c8582860161141f565b925050602061161d8582860161141f565b9150509250929050565b60008060006060848603121561163c57600080fd5b600061164a8682870161141f565b935050602061165b8682870161141f565b925050604061166c8682870161141f565b9150509250925092565b6000806000806080858703121561168c57600080fd5b600061169a8782880161141f565b94505060206116ab8782880161141f565b93505060406116bc8782880161141f565b92505060606116cd87828801611244565b91505092959194509250565b60006116e583836117cd565b905092915050565b60006116f882611af6565b6117028185611b19565b93508360208202850161171485611ae6565b8060005b85811015611750578484038952815161173185826116d9565b945061173c83611b0c565b925060208a01995050600181019050611718565b50829750879550505050505092915050565b61176b81611b4c565b82525050565b600061177c82611b01565b6117868185611b2a565b9350611796818560208601611b6f565b61179f81611cdb565b840191505092915050565b60006117b7600583611b3b565b91506117c282611cec565b602082019050919050565b6000610140830160008301516117e6600086018261196f565b5060208301516117f96020860182611762565b50604083015161180c604086018261196f565b50606083015184820360608601526118248282611771565b9150506080830151611839608086018261196f565b5060a083015161184c60a086018261196f565b5060c083015161185f60c0860182611762565b5060e083015161187260e086018261192d565b508091505092915050565b600061014083016000830151611896600086018261196f565b5060208301516118a96020860182611762565b5060408301516118bc604086018261196f565b50606083015184820360608601526118d48282611771565b91505060808301516118e9608086018261196f565b5060a08301516118fc60a086018261196f565b5060c083015161190f60c0860182611762565b5060e083015161192260e086018261192d565b508091505092915050565b606082016000820151611943600085018261196f565b506020820151611956602085018261196f565b506040820151611969604085018261196f565b50505050565b61197881611b56565b82525050565b61198781611b56565b82525050565b600060208201905081810360008301526119a781846116ed565b905092915050565b600060208201905081810360008301526119c8816117aa565b9050919050565b600060208201905081810360008301526119e9818461187d565b905092915050565b6000602082019050611a06600083018461197e565b92915050565b6000611a16611a27565b9050611a228282611bd4565b919050565b6000604051905090565b600067ffffffffffffffff821115611a4c57611a4b611cac565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611a7857611a77611cac565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611aa457611aa3611cac565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611ad057611acf611cac565b5b611ad982611cdb565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611b8d578082015181840152602081019050611b72565b83811115611b9c576000848401525b50505050565b60006002820490506001821680611bba57607f821691505b60208210811415611bce57611bcd611c7d565b5b50919050565b611bdd82611cdb565b810181811067ffffffffffffffff82111715611bfc57611bfb611cac565b5b80604052505050565b6000611c1082611b56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c4357611c42611c4e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4572726f72000000000000000000000000000000000000000000000000000000600082015250565b611d1e81611b4c565b8114611d2957600080fd5b50565b611d3581611b56565b8114611d4057600080fd5b5056fea2646970667358221220e6d1e1cb284d785442b4f332751ab7032aac5219f6026f9585b92244632d3e6764736f6c63430008040033";

type MerkleTreeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTree__factory extends ContractFactory {
  constructor(...args: MerkleTreeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTree> {
    return super.deploy(overrides || {}) as Promise<MerkleTree>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTree {
    return super.attach(address) as MerkleTree;
  }
  override connect(signer: Signer): MerkleTree__factory {
    return super.connect(signer) as MerkleTree__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeInterface {
    return new utils.Interface(_abi) as MerkleTreeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTree {
    return new Contract(address, _abi, signerOrProvider) as MerkleTree;
  }
}
