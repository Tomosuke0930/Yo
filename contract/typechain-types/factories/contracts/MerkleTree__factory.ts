/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MerkleTree,
  MerkleTreeInterface,
} from "../../contracts/MerkleTree";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "groupName",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "level",
            type: "uint64",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchAddNode[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchAddNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "level",
            type: "uint64",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchUpdateNode[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchUpdateNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "parentIndex",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "parentLevel",
            type: "uint64",
          },
        ],
        internalType: "struct IMerkleTreeNode.BatchUpdateNodePro[]",
        name: "txs",
        type: "tuple[]",
      },
    ],
    name: "batchUpdateNodePro",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
    ],
    name: "getAllNodes",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "groupName",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "level",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "bytes16",
                name: "groupId",
                type: "bytes16",
              },
              {
                internalType: "uint64",
                name: "index",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "level",
                type: "uint64",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode[]",
        name: "allNodes",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "groupName",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "level",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "bytes16",
                name: "groupId",
                type: "bytes16",
              },
              {
                internalType: "uint64",
                name: "index",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "level",
                type: "uint64",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
    ],
    name: "getNodeByHash",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "groupName",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "siblingHash",
            type: "bytes32",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "level",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "bytes16",
                name: "groupId",
                type: "bytes16",
              },
              {
                internalType: "uint64",
                name: "index",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "level",
                type: "uint64",
              },
            ],
            internalType: "struct IMerkleTreeNode.ParentLocate",
            name: "parent",
            type: "tuple",
          },
        ],
        internalType: "struct IMerkleTreeNode.MerkleTreeNode",
        name: "node",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
    ],
    name: "getNodeCounts",
    outputs: [
      {
        internalType: "uint256",
        name: "nodeCounts",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
      {
        internalType: "uint256",
        name: "_level",
        type: "uint256",
      },
    ],
    name: "getSameLevelNodesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "counts",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "merkleTrees",
    outputs: [
      {
        internalType: "bytes16",
        name: "groupId",
        type: "bytes16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nums",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611fde806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b1b66cf911610066578063b1b66cf91461016b578063b2cbecd31461019b578063ce834caf146101cb578063d4718e00146101e7578063d5b13259146102175761009e565b806329bbdc50146100a35780635232420a146100d35780637ece2ef6146100ef57806385d88cb11461010b57806396a76bdf1461013b575b600080fd5b6100bd60048036038101906100b89190611959565b610235565b6040516100ca9190611c73565b60405180910390f35b6100ed60048036038101906100e89190611864565b61030e565b005b610109600480360381019061010491906117bc565b6103c5565b005b610125600480360381019061012091906119a8565b61054b565b6040516101329190611c38565b60405180910390f35b6101556004803603810190610150919061191d565b61057c565b6040516101629190611c8f565b60405180910390f35b610185600480360381019061018091906118e1565b610594565b6040516101929190611c73565b60405180910390f35b6101b560048036038101906101b091906118b8565b610660565b6040516101c29190611c8f565b60405180910390f35b6101e560048036038101906101e09190611810565b6106bb565b005b61020160048036038101906101fc91906118b8565b6107fc565b60405161020e9190611c16565b60405180910390f35b61021f610a1e565b60405161022c9190611c8f565b60405180910390f35b61023d611366565b60006102498585610a23565b50905060005b815181101561030557818181518110610291577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516080015167ffffffffffffffff168414156102f2578181815181106102e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505b80806102fd90611e54565b91505061024f565b50509392505050565b60005b81518110156103c0576103ad83838381518110610357577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015184848151811061039c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151610b45565b80806103b890611e54565b915050610311565b505050565b60005b8151811015610546576105338383838151811061040e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151848481518110610453577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151858581518110610498577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518686815181106104dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160800151878781518110610522577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160600151610c2b565b808061053e90611e54565b9150506103c8565b505050565b6001816031811061055b57600080fd5b600202016000915090508060000160009054906101000a900460801b905081565b60006105888383610a23565b90508091505092915050565b61059c611366565b60006105a7846107fc565b905060005b8151811015610658578181815181106105ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001518414156106455781818151811061063a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505b808061065090611e54565b9150506105ac565b505092915050565b60008061066c83611120565b9050600181603181106106a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002020160010180549050915050919050565b60005b81518110156107f7576107e483838381518110610704577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151848481518110610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516060015185858151811061078e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151604001518686815181106107d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001516111d0565b80806107ef90611e54565b9150506106be565b505050565b6060600061080983611120565b905060018160318110610845577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60020201600101805480602002602001604051908101604052809291908181526020016000905b82821015610a1257838290600052602060002090600502016040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016003820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600482016040518060600160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050815250508152602001906001019061086c565b50505050915050919050565b603181565b6060600080610a31856107fc565b905060005b8151811015610b3c57818181518110610a78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160a0015167ffffffffffffffff16851415610b2957818181518110610ace577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848481518110610b0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508280610b2590611e54565b9350505b8080610b3490611e54565b915050610a36565b50509250929050565b610b648373ffffffffffffffffffffffffffffffffffffffff16611343565b610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90611c53565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020905081816000018190555050505050565b610c4a8673ffffffffffffffffffffffffffffffffffffffff16611343565b610c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8090611c53565b60405180910390fd5b610c91611366565b6000610c9c86611120565b9050868260000181815250508582606001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250508482602001818152505083826080019067ffffffffffffffff16908167ffffffffffffffff1681525050828260a0019067ffffffffffffffff16908167ffffffffffffffff1681525050858260c00151600001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff191681525050620100018260c001516020019067ffffffffffffffff16908167ffffffffffffffff168152505060118260c001516040019067ffffffffffffffff16908167ffffffffffffffff168152505060018160318110610de0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002020160010182908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060808201518160030160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160030160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160040160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050816000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060808201518160030160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160030160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160040160008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050509050505050505050505050565b600080600090505b60318110156111c9576001816031811061116b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6002020160000160009054906101000a900460801b6fffffffffffffffffffffffffffffffff1916836fffffffffffffffffffffffffffffffff191614156111b657809150506111cb565b80806111c190611e54565b915050611128565b505b919050565b60008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002090506112688673ffffffffffffffffffffffffffffffffffffffff16611343565b6112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90611c53565b60405180910390fd5b818160020181905550848160040160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550838160040160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550828160040160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b149050919050565b6040518060e0016040528060008019168152602001600080191681526020016000801916815260200160006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016113d36113d9565b81525090565b604051806060016040528060006fffffffffffffffffffffffffffffffff19168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b600061143461142f84611ccf565b611caa565b905080838252602082019050828560a086028201111561145357600080fd5b60005b8581101561148357816114698882611622565b845260208401935060a08301925050600181019050611456565b5050509392505050565b60006114a061149b84611cfb565b611caa565b905080838252602082019050828560808602820111156114bf57600080fd5b60005b858110156114ef57816114d588826116aa565b8452602084019350608083019250506001810190506114c2565b5050509392505050565b600061150c61150784611d27565b611caa565b9050808382526020820190508285608086028201111561152b57600080fd5b60005b8581101561155b5781611541888261171e565b84526020840193506080830192505060018101905061152e565b5050509392505050565b60008135905061157481611f35565b92915050565b600082601f83011261158b57600080fd5b813561159b848260208601611421565b91505092915050565b600082601f8301126115b557600080fd5b81356115c584826020860161148d565b91505092915050565b600082601f8301126115df57600080fd5b81356115ef8482602086016114f9565b91505092915050565b60008135905061160781611f4c565b92915050565b60008135905061161c81611f63565b92915050565b600060a0828403121561163457600080fd5b61163e60a0611caa565b9050600061164e8482850161160d565b60008301525060206116628482850161160d565b6020830152506040611676848285016115f8565b604083015250606061168a848285016117a7565b606083015250608061169e848285016117a7565b60808301525092915050565b6000608082840312156116bc57600080fd5b6116c66080611caa565b905060006116d68482850161160d565b60008301525060206116ea848285016115f8565b60208301525060406116fe848285016117a7565b6040830152506060611712848285016117a7565b60608301525092915050565b60006080828403121561173057600080fd5b61173a6080611caa565b9050600061174a8482850161160d565b600083015250602061175e848285016115f8565b6020830152506040611772848285016117a7565b6040830152506060611786848285016117a7565b60608301525092915050565b6000813590506117a181611f7a565b92915050565b6000813590506117b681611f91565b92915050565b600080604083850312156117cf57600080fd5b60006117dd85828601611565565b925050602083013567ffffffffffffffff8111156117fa57600080fd5b6118068582860161157a565b9150509250929050565b6000806040838503121561182357600080fd5b600061183185828601611565565b925050602083013567ffffffffffffffff81111561184e57600080fd5b61185a858286016115a4565b9150509250929050565b6000806040838503121561187757600080fd5b600061188585828601611565565b925050602083013567ffffffffffffffff8111156118a257600080fd5b6118ae858286016115ce565b9150509250929050565b6000602082840312156118ca57600080fd5b60006118d8848285016115f8565b91505092915050565b600080604083850312156118f457600080fd5b6000611902858286016115f8565b92505060206119138582860161160d565b9150509250929050565b6000806040838503121561193057600080fd5b600061193e858286016115f8565b925050602061194f85828601611792565b9150509250929050565b60008060006060848603121561196e57600080fd5b600061197c868287016115f8565b935050602061198d86828701611792565b925050604061199e86828701611792565b9150509250925092565b6000602082840312156119ba57600080fd5b60006119c884828501611792565b91505092915050565b60006119dd8383611a98565b6101208301905092915050565b60006119f582611d63565b6119ff8185611d7b565b9350611a0a83611d53565b8060005b83811015611a3b578151611a2288826119d1565b9750611a2d83611d6e565b925050600181019050611a0e565b5085935050505092915050565b611a5181611daf565b82525050565b611a6081611daf565b82525050565b611a6f81611ddb565b82525050565b6000611a82601983611d8c565b9150611a8d82611f0c565b602082019050919050565b61012082016000820151611aaf6000850182611a66565b506020820151611ac26020850182611a66565b506040820151611ad56040850182611a66565b506060820151611ae86060850182611a48565b506080820151611afb6080850182611c07565b5060a0820151611b0e60a0850182611c07565b5060c0820151611b2160c0850182611bb6565b50505050565b61012082016000820151611b3e6000850182611a66565b506020820151611b516020850182611a66565b506040820151611b646040850182611a66565b506060820151611b776060850182611a48565b506080820151611b8a6080850182611c07565b5060a0820151611b9d60a0850182611c07565b5060c0820151611bb060c0850182611bb6565b50505050565b606082016000820151611bcc6000850182611a48565b506020820151611bdf6020850182611c07565b506040820151611bf26040850182611c07565b50505050565b611c0181611e05565b82525050565b611c1081611e0f565b82525050565b60006020820190508181036000830152611c3081846119ea565b905092915050565b6000602082019050611c4d6000830184611a57565b92915050565b60006020820190508181036000830152611c6c81611a75565b9050919050565b600061012082019050611c896000830184611b27565b92915050565b6000602082019050611ca46000830184611bf8565b92915050565b6000611cb4611cc5565b9050611cc08282611e23565b919050565b6000604051905090565b600067ffffffffffffffff821115611cea57611ce9611ecc565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611d1657611d15611ecc565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611d4257611d41611ecc565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611da882611de5565b9050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b611e2c82611efb565b810181811067ffffffffffffffff82111715611e4b57611e4a611ecc565b5b80604052505050565b6000611e5f82611e05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e9257611e91611e9d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f596f752061726520436f6e747261637420416464726573732100000000000000600082015250565b611f3e81611d9d565b8114611f4957600080fd5b50565b611f5581611daf565b8114611f6057600080fd5b50565b611f6c81611ddb565b8114611f7757600080fd5b50565b611f8381611e05565b8114611f8e57600080fd5b50565b611f9a81611e0f565b8114611fa557600080fd5b5056fea2646970667358221220e77a69d8acfe7e9625b6b0ac7705e0e70b2314a98185a6d71f81088b9a878d8064736f6c63430008040033";

type MerkleTreeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTree__factory extends ContractFactory {
  constructor(...args: MerkleTreeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTree> {
    return super.deploy(overrides || {}) as Promise<MerkleTree>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTree {
    return super.attach(address) as MerkleTree;
  }
  override connect(signer: Signer): MerkleTree__factory {
    return super.connect(signer) as MerkleTree__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeInterface {
    return new utils.Interface(_abi) as MerkleTreeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTree {
    return new Contract(address, _abi, signerOrProvider) as MerkleTree;
  }
}
