/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Commitment,
  CommitmentInterface,
} from "../../contracts/Commitment";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_userId",
        type: "bytes32",
      },
      {
        internalType: "bytes16",
        name: "_groupId",
        type: "bytes16",
      },
      {
        internalType: "uint256",
        name: "_createdAt",
        type: "uint256",
      },
    ],
    name: "addCommitment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getTargetCommitment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "userId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "mintAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
          {
            internalType: "bytes16",
            name: "groupId",
            type: "bytes16",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
        ],
        internalType: "struct ICommitment.Commitment",
        name: "commitment",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_metadta",
        type: "string",
      },
      {
        internalType: "address",
        name: "_mintAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "updateCommitment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b09806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806333e97ff21461004657806385aed5e9146100765780639ce6b16914610092575b600080fd5b610060600480360381019061005b91906106cc565b6100ae565b60405161006d9190610922565b60405180910390f35b610090600480360381019061008b9190610791565b610265565b005b6100ac60048036038101906100a79190610708565b610317565b005b6100b6610499565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016006820180546101db90610a05565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610a05565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b505050505081525050905092915050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905085858260060191906102cb929190610505565b50838160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6040518060e00160405280868152602001848152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001828152602001836fffffffffffffffffffffffffffffffff19168152602001604051806020016040528060008152508152506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060c082015181600601908051906020019061048d92919061058b565b50905050505050505050565b6040518060e00160405280600081526020016000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006fffffffffffffffffffffffffffffffff19168152602001606081525090565b82805461051190610a05565b90600052602060002090601f016020900481019282610533576000855561057a565b82601f1061054c57803560ff191683800117855561057a565b8280016001018555821561057a579182015b8281111561057957823582559160200191906001019061055e565b5b5090506105879190610611565b5090565b82805461059790610a05565b90600052602060002090601f0160209004810192826105b95760008555610600565b82601f106105d257805160ff1916838001178555610600565b82800160010185558215610600579182015b828111156105ff5782518255916020019190600101906105e4565b5b50905061060d9190610611565b5090565b5b8082111561062a576000816000905550600101610612565b5090565b60008135905061063d81610a77565b92915050565b60008135905061065281610a8e565b92915050565b60008135905061066781610aa5565b92915050565b60008083601f84011261067f57600080fd5b8235905067ffffffffffffffff81111561069857600080fd5b6020830191508360018202830111156106b057600080fd5b9250929050565b6000813590506106c681610abc565b92915050565b600080604083850312156106df57600080fd5b60006106ed8582860161062e565b92505060206106fe858286016106b7565b9150509250929050565b60008060008060008060c0878903121561072157600080fd5b600061072f89828a0161062e565b965050602061074089828a016106b7565b955050604061075189828a01610658565b945050606061076289828a01610658565b935050608061077389828a01610643565b92505060a061078489828a016106b7565b9150509295509295509295565b6000806000806000608086880312156107a957600080fd5b600086013567ffffffffffffffff8111156107c357600080fd5b6107cf8882890161066d565b955095505060206107e28882890161062e565b93505060406107f38882890161062e565b9250506060610804888289016106b7565b9150509295509295909350565b61081a81610960565b82525050565b61082981610972565b82525050565b6108388161099e565b82525050565b600061084982610944565b610853818561094f565b93506108638185602086016109d2565b61086c81610a66565b840191505092915050565b600060e08301600083015161088f6000860182610913565b5060208301516108a2602086018261082f565b5060408301516108b5604086018261082f565b5060608301516108c86060860182610811565b5060808301516108db6080860182610913565b5060a08301516108ee60a0860182610820565b5060c083015184820360c0860152610906828261083e565b9150508091505092915050565b61091c816109c8565b82525050565b6000602082019050818103600083015261093c8184610877565b905092915050565b600081519050919050565b600082825260208201905092915050565b600061096b826109a8565b9050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156109f05780820151818401526020810190506109d5565b838111156109ff576000848401525b50505050565b60006002820490506001821680610a1d57607f821691505b60208210811415610a3157610a30610a37565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b610a8081610960565b8114610a8b57600080fd5b50565b610a9781610972565b8114610aa257600080fd5b50565b610aae8161099e565b8114610ab957600080fd5b50565b610ac5816109c8565b8114610ad057600080fd5b5056fea2646970667358221220f469cf97a88463fdfb9a794eddb1b1a3c67fd1da4a0067bf94f7cf4ce1bdde5e64736f6c63430008040033";

type CommitmentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Commitment__factory extends ContractFactory {
  constructor(...args: CommitmentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Commitment> {
    return super.deploy(overrides || {}) as Promise<Commitment>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Commitment {
    return super.attach(address) as Commitment;
  }
  override connect(signer: Signer): Commitment__factory {
    return super.connect(signer) as Commitment__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentInterface {
    return new utils.Interface(_abi) as CommitmentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Commitment {
    return new Contract(address, _abi, signerOrProvider) as Commitment;
  }
}
