/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC1238Approval,
  ERC1238ApprovalInterface,
} from "../../../../contracts/interface/ERC1238/ERC1238Approval";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600060405180608001604052806040518060400160405280601581526020017f45524331323338204d696e7420417070726f76616c000000000000000000000081525081526020016040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020014681526020013073ffffffffffffffffffffffffffffffffffffffff1681525090507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8160000151805190602001208260200151805190602001208360400151846060015160405160200161010d95949392919061015c565b60405160208183030381529060405280519060200120600081905550506101f5565b610138816101af565b82525050565b610147816101c1565b82525050565b610156816101eb565b82525050565b600060a082019050610171600083018861013e565b61017e602083018761013e565b61018b604083018661013e565b610198606083018561014d565b6101a5608083018461012f565b9695505050505050565b60006101ba826101cb565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60b3806102036000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633644e51514602d575b600080fd5b60336047565b604051603e9190605a565b60405180910390f35b60005481565b6054816073565b82525050565b6000602082019050606d6000830184604d565b92915050565b600081905091905056fea26469706673582212207b37d8719ce02c2227dd482eb1fe81fe3394525d1abe97221f03b1039744852664736f6c63430008040033";

type ERC1238ApprovalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1238ApprovalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1238Approval__factory extends ContractFactory {
  constructor(...args: ERC1238ApprovalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC1238Approval> {
    return super.deploy(overrides || {}) as Promise<ERC1238Approval>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC1238Approval {
    return super.attach(address) as ERC1238Approval;
  }
  override connect(signer: Signer): ERC1238Approval__factory {
    return super.connect(signer) as ERC1238Approval__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1238ApprovalInterface {
    return new utils.Interface(_abi) as ERC1238ApprovalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1238Approval {
    return new Contract(address, _abi, signerOrProvider) as ERC1238Approval;
  }
}
