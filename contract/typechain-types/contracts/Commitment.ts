/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ICommitment {
  export type CommitmentStruct = {
    id: PromiseOrValue<BigNumberish>;
    userId: PromiseOrValue<BytesLike>;
    hash: PromiseOrValue<BytesLike>;
    mintAddress: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    groupId: PromiseOrValue<BytesLike>;
    metadata: PromiseOrValue<string>;
  };

  export type CommitmentStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    id: BigNumber;
    userId: string;
    hash: string;
    mintAddress: string;
    createdAt: BigNumber;
    groupId: string;
    metadata: string;
  };
}

export interface CommitmentInterface extends utils.Interface {
  functions: {
    "addCommitment(address,uint256,bytes32,bytes32,bytes16,uint256)": FunctionFragment;
    "getTargetCommitment(address,uint256)": FunctionFragment;
    "updateCommitment(string,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCommitment"
      | "getTargetCommitment"
      | "updateCommitment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCommitment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCommitment",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommitment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommitment",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Commitment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommitmentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BytesLike>,
      _groupId: PromiseOrValue<BytesLike>,
      _createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTargetCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ICommitment.CommitmentStructOutput] & {
        commitment: ICommitment.CommitmentStructOutput;
      }
    >;

    updateCommitment(
      _metadta: PromiseOrValue<string>,
      _mintAddress: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCommitment(
    _address: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BytesLike>,
    _userId: PromiseOrValue<BytesLike>,
    _groupId: PromiseOrValue<BytesLike>,
    _createdAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTargetCommitment(
    _address: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ICommitment.CommitmentStructOutput>;

  updateCommitment(
    _metadta: PromiseOrValue<string>,
    _mintAddress: PromiseOrValue<string>,
    _address: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BytesLike>,
      _groupId: PromiseOrValue<BytesLike>,
      _createdAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTargetCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ICommitment.CommitmentStructOutput>;

    updateCommitment(
      _metadta: PromiseOrValue<string>,
      _mintAddress: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BytesLike>,
      _groupId: PromiseOrValue<BytesLike>,
      _createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTargetCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCommitment(
      _metadta: PromiseOrValue<string>,
      _mintAddress: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _userId: PromiseOrValue<BytesLike>,
      _groupId: PromiseOrValue<BytesLike>,
      _createdAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTargetCommitment(
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCommitment(
      _metadta: PromiseOrValue<string>,
      _mintAddress: PromiseOrValue<string>,
      _address: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
