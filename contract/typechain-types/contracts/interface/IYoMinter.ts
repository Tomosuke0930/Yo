/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IYoMinterInterface extends utils.Interface {
  functions: {
    "mint(uint256,uint256,uint256,uint256[8],string,uint8,bytes32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "mint"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {
    "Minted(uint256,address)": EventFragment;
    "ProofVerified(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofVerified"): EventFragment;
}

export interface MintedEventObject {
  tokenId: BigNumber;
  to: string;
}
export type MintedEvent = TypedEvent<[BigNumber, string], MintedEventObject>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface ProofVerifiedEventObject {
  signal: string;
}
export type ProofVerifiedEvent = TypedEvent<[string], ProofVerifiedEventObject>;

export type ProofVerifiedEventFilter = TypedEventFilter<ProofVerifiedEvent>;

export interface IYoMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IYoMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mint(
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      externalNullifier: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      tokenURI: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  mint(
    root: PromiseOrValue<BigNumberish>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    externalNullifier: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    tokenURI: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mint(
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      externalNullifier: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      tokenURI: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Minted(uint256,address)"(tokenId?: null, to?: null): MintedEventFilter;
    Minted(tokenId?: null, to?: null): MintedEventFilter;

    "ProofVerified(bytes32)"(signal?: null): ProofVerifiedEventFilter;
    ProofVerified(signal?: null): ProofVerifiedEventFilter;
  };

  estimateGas: {
    mint(
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      externalNullifier: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      tokenURI: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      externalNullifier: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      tokenURI: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
